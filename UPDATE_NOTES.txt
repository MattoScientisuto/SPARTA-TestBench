7-5-23
 - Removed 'argparse' to run the script using a terminal
  - No need for it anymore since I added the GUI
  - Would have become more irrelevant as more parts were added (i.e. torque sensor, DSP)
 - Added a gain and offset value for the load cell data
  - Calibrated by using a known weight (i.e. soil sample) and placed it on top of it
   -Trial and error: repeated until the correct weight in newtons was displayed
        
7-10-23
 - Fixed issue where continuous load cell runs using the GUI resulted in timestamps not saving properly
  - Every new log file would duplicate amount of timestamp readings
   - SOLUTION: At the start of every run, clear all previously saved data in lists
  - Added JPL logo into top left corner
    
7-17-23
  - Added live plot
   - Running/reading from the load cell is currently assigned to a separate thread
    - Allows the live plot to actually update (otherwise the main window freezes/stops responding)
     - BUT currently has an issue where the thread never terminates, so the whole program has to be restarted on each run
  - Removed old plot that appears after data acquisition was finished
   - No need for it anymore since we now have live plots
  - Attempted to figure out timing/performance inconsistencies
   - Still more work to do

7-18-23
 - Added torque sensor reading and logging functions + live plot
  - Added a scuffed separator in between the load cell and torque sensor operations
    - I thought it would have pushed the torque sensor items to the right
    - Going to probably need blank placeholders with padding or something
     
 - Still need to figure out timing/performance inconsistencies
  - For sure when laptop is not plugged in, it reads and plots a lot slower
  - ALSO with the current DAQ tasks, I think setting it on 'CONTINUOUS' might be causing inconsistent time
   - Sometimes causes a time clock error at the end of operations
   - Can potentially screw up the overall program
  - Need to figure out how to stop animation functions once operation is over
   - Significantly slows down the other component since it's still monitoring another file
   - Need to figure out how to kill threads properly
    
  - POSSIBILITIES:
   1.) Thread the animation functions as well (might be easier said than done)

7-19-23
 - Adjusted refresh rate on animation objects to 400ms
  - Might just have to bite the bullet and look at the lag (takes up way too much CPU space)
  - Adjusted buffer size
    - Not exactly what it affected just yet (continue looking into it)
    - Apparently higher rates will make it capture data less frequently

  - PROBABLY A TEMPORARY FIX:
   - Added a 'Restart' button 
    - Restarts the whole script and GUI to make sure the threads for both devices are properly closed
    - Allows the load cell and torque sensor to re-run properly
    - In the future, I would rather have a way for it to automatically close the threads without the user needing to know about it
     
   - Found that the occasional clock error is because the program is going too slow to keep up with the DAQ
    - Usually happens when laptop doesn't have enough power, or isn't plugged in
    - Or too much CPU power is being taken which significantly slows down reading and logging
     
    - Need to add
     - 'Currently running' indicators to show what device is currently running
     - 'Current log file' indicator to assure the user the correct log file is being used
      - Right now all of the confirmation outputs go through the terminal, which won't work later once this is an executable
     - ALSO need to calibrate torque sensor with the wrench once Bob finishes his plate to attach to it
     
7-24-23
 - Changed load cell live plot to 'Depth (cm)' and 'Force (Newtons)'
 - Also inverted the y-axis
 - Added 'Date Plotted' to both figures
    
7-25-23
 - Added new status displays for:
  - Current log file names
  - Running status (true or false)
  - FOR LOAD CELL: 
   - Current depth
    - Has some performance inconsistencies
     - Disabled for now
   - Maximum newton value read
       
7-26-23
 - Major performance improvements
  - Forgot all about the DAQ print statements that would clog up the console
  - Average CPU performance dropped from 70-90% capacity to 10-23%
  - Also allowed the 'Current depth' meter to be re-enabled without any issues
  - Laptop can now operate at optimal performance (even when unplugged)
    
  - DSP Functions created for 0.01V and 0.5V amplitude
   - Script loads two pre-made Ivium method files and sends them to Ivium to scan
     - Will probably be adding the same status displays
  - Added device connected status
      
7-31-23
 - Found a stackoverflow makeshift expanding sidebar
  - Currently building from the ground up on 'sidebar_stack.py'
  - Will migrate code back over once everything is running seamlessly
 - Added all components to CPT page
  - TESTED: data logging and plotting working, also doesn't erase any data switching page to page
  - TO DO: adjust grid positions to make it look pretty
    
  - Note to self: try to really understand how the sidebar frame and shaping works
   - Seems really helpful for making custom interfaces that need really specific details
    
8-1-23
 - Completely migrated functions over to this new .py file
 - Added all components to VST page
 - Added individual output folders for CPT and DSP
  - Also includes the current date for more organization purposes
 - Added some new components to DSP page
  - 0.01V and 0.5V buttons are temporary (will be replaced with checkboxes or radio buttons)
  - Added displays for connection and device serial number
 - Fixed grid positions for CPT and VST

8-7-23
  'Operation' button on the Home page currently reads and logs from the load cell first, then torque sensor, then DSP.
 - The log file names are automatically set to begin with CPT_ VST_ and DSP_ , followed by the current date and time when the logging began.
 - The functionality of the button (for now) is planned to be used for the Blue Origin flight since GUI will not be necessary for the flight (all we need is data logging)
 - Once I polish the functionality of the button, I will most likely create a separate script without GUI for the micro-PCs
 To-do:
 - Currently the DSP logging function saves the .idf file right away before any pre-treatment or primary data is collected. Will need to fix.

For the main manual Cone Penetrator page, running the load cell monitor will activate the linear actuator and stop once the operation finishes.
 - Still very early, just wanted to see if it worked properly

8-8-23
 - Created a new script specifically for Blue Origin flight (work in progress)
  - Will be the primary script ran on micro-PCs during the flight
  - Designed to be memory efficient and automated without human interaction
  - Will most likely have multiple versions for different soil samples and bench systems

8-9-23
 - Received T4 Pro Micro-PC (64GB HDD, 4GB RAM)
 - Tested runtime speed of BlueOriginSequence.py
  - Success! : Ran at same speed of my fully charged JPL laptop
  - Logged all data on time, DSP sweep saved on time

 - Next steps:
  - Further optimization: probably no need to add data in real time during logging since no plotting is needed for the flight
  - Need to add a second DSP channel to run consectively (probably as a method)
  - Add thermocouple sequence once I receive a pin/wiring diagram and new DAQ

8-15-23
 - Added 'Open Data Folder' buttons for each component
 - Added a blank template page for the upcoming Thermal Conductivity Probe
  - Will most likely need buttons to inject heat, monitor temperature, record data, and possibly a live plot

8-16-23
 - Finally got around to fixing the CPT and VST reading threads
  - No longer need to restart the program to continue reading a component 2 or more times wooo
  - Very simple fix:
   - Instead of creating the thread functions once for the CPT and VST and starting them, new ones are now created everytime their respective start functions are called
   - Eliminated the need to kill them by restarting

8-21-23
 - Added depth dropdown menu + duration entry box for CPT and VST
 - CPT Depth dropdown menu ranges from 5cm to 15cm
  - Currently just a placeholder, values don't serve a purpose yet
  - Need to know what actuator it is for 
  - Also would need to calculate actuator velocity to set values and duration correctly

 - VST duration should be functional if nidaqmx acquisition rate stays the same
  - This needs to be tested in the lab tomorrow

8-22-23
 - Adjusted VST sample rate to match DAQ speed
  - This might need to be adjusted once the actual torque sensor is connected (more or less)

8-23-23
 - Added TCP page and operation (fully functional)
  - Runs concurrently in the background with any other device's operation (CPT, VST, DSP)
  - Logs and plots data in real time
  - Runs indefinitely until you press stop
  - Wiring and temperature calibration still needs to be addressed before usage

 - Also minor changes on CPT and VST data logging
  - Got rid of unnecessary array appending that took place before writing to their respective CSV 
  - Probably a very minor efficiency increase, but an increase is an increase :D

9-5-23
 - Added serial ports for CPT actuator and stepper motor
  - Temporarily disabled stepper motor serial port until CPT is completed finished and calibrated

9-6-23
 - Added functionality to CPT depth selection menu
  - Can choose from 5cm to 10cm depth for the actuator to go
 - Also added 'Emergency Stop' button and 'Reset Actuator' Position button
 * Next steps:
  - Find out a way to make COM ports correctly correspond to both the actuator and motor
   - They can change often when disconnected and reconnected from time to time
   - It would be a hassle in the future if you have to go directly into the code to change the COM port manually

...

12-11-23
  - Added a stepper motor tester GUI script
   - Works similarly to the ActuatorTester.py, except it's for the torque motor
   - Used to verify connection and functionality before installing on the bench

1-8-24
  - Added VST Emergency Stop button
  - Separated CPT Operation/Emergency Stop and Actuator Stop
   - Actuator Stop: stops the actuator BUT continues monitoring
   - Operation Stop: stops the actuator and concludes monitoring

  - Added Jog Buttons for linear actuator
   - Used to jog the actuator without needing to log data

  - Added a separate Load Cell Calibrator to log data continuously for 1000 seconds
   - Used to monitor load cell data without jogging the actuator

1-9-24
  - Re-enabled TCP module (still not working)
   - most likely a wiring issue we'll have to figure out
  
1-12-24
  - Changed CPT and VST appending process
   - Now allows continuous appending on the same file while live plot updates
  - 'Run Count' indicator added on CPT and VST
   - Run count on the same log file is kept track of

1-22-24
 - Fixed Blue Origin DSP sequence crashing when launching from task scheduler
  - Could've stemmed from a multitude of reasons:
   1. 'input' as the variable name for the array holding dsp#1's names 
    - input is the default name for a python function and it was yellow
   2. Task Scheduler was launching from system32 instead of the Bench_Repo folder
    - I wanted to mimic exactly what would happen if we we're on the flight double clicking it
   3. Multiple triggers set on Task Scheduler could have caused interference
   4. There was no delay between starting the scans and checking if the devices were free yet
    - From the console logs, it looked like the scans finished in seconds
    - When I wanted to print the current device, it kept changing from dsp#1 and #2

1-29-24
 - Updated Blue Origin DSP print statements to be more clear
  - specifies which channel it's selecting a device from and scanning on
  - prints status codes when selecting devices 
 
2-6-24
 - Major fixes to DAQ virtual channels for Load Cell and Torque sensor
  - Followed the correct setup documentation on the link at the top of the file
   1. Previously I was just using bridge ai channels
    - This made it so no configuration options were available since it didn't recognize what type of sensor I was using
    - It was reading completely raw values with no excitation, no bridge info, or correctly scaled units
   2. Currently have the following channels:

    - Load Cell: add_ai_force_bridge_two_point_lin_chan
    - Torque Sensor: add_ai_torque_bridge_two_point_lin_chan
    - TCP: add_ai_rtd_chan

   3. For the Load Cell and Torque Sensor, there are more options, but so far I'm thinking the current is ok
    - Reason being, it matches up exactly to NI-MAX's default channel settings
    - And it matches the exact measurements
    * HOWEVER: other channels allow for electrical to Physical units conversion
     - And I'm aware that the calibration sheet from Transducer Techniques has the numbers for that
     - Definitely ask next time

  - Also added serial port kill button + serial status indicators on home page (as per Luke and Bob's suggestion)
   - Seems to be working well so far (no COM problems if you kill the ports manually with the button)
   * When the program starts up, the 2nd last line of code 'check_ports()' checks the status and will appear as true if successful
   - Might make it so you can re-activate as well 

2-12-24
 - Improved serial port closing process
   - Now closes ports anytime you close the program in case you forget

2-13-24
 - Added VST rotation and DAQ commands to the Blue Origin sequence

2-14-24
 - Remade the IMU-P LabView executable 
  - Trying to set a permanent COM port for it 'COM25'
  * Most likely gonna have to keep them plugged in the same port to eliminate risk (TEST THIS)

2-16-24
 - Split Blue Origin sequence into DSP and VST files
  - DSP should be taking in data the whole time
  - VST is probably gonna be triggered at a certain point through XML

 - Wrote work in progress IPC test XML for Blue Origin
  - Currently has commands for power and message sending for sample flight events
 - Added socket listener for python to receive and interpret ethernet messages

 - Added Sequence of Events document for python cases

2-28-24
 - Changed batch file appending system to python's sys.out redirect
  - Batch file appending is too dependent on whether the program is CTRL+C'ed out to save anything
   - It's all built up, but if it's closed out normally, it erases all of the python print statements
  - It also doesn't show any live output of other nested batch files starting
 ** Now we have 3 different console logs **
  1. console_log_dspimu.txt : keeps track of Ivium DSP channels, operations, and file saving + timestamps
  2. console_log_socketlistener.txt : keeps track of incoming flight event messages from the IPC + timestamps
  3. console_log_vstflight.txt : keeps track of VST file saving, and data logging start and end timestamps

 - VST now triggers correctly on 'coast_start' events
 !!! BUT when everything was running at the same time (i.e. DSPs, IMU, Flight Simulator, SocketListener, DAQ) !!!
 ! TEST WITH A SYSTEM RESTART AND BAREBONE TASK SCHEDULER RUNNING THE SCRIPTS !
  - Data logging for VST stopped at 11-12 seconds
   - Because the cpu or memory couldn't keep up (more likely CPU like how it was on the old bench GUI when we constantly printed the readings)

 - Remade the IMU Executable again, not sure why it kept giving incorrect baudrate until it suddenly decided to work again lmao

 - Created 'start banners' to mark the beginning of each new script run
  - better readability since we append the same type of thing for run

 - VST is threaded to avoid IPC message interference
  - VST runs independently while socket listener still receives further messages simultaneously

2-29-24
 - Updated VST acquisition and appending method
  - Made it so during the actual data acquisition, we're just appending the values to two arrays
  - After acquisition and rotation finishes, then we write to the CSV all at once with both arrays
  * Gives less for the system to do during the actual acquisition
   * Writing is most likely just O(1) but now it happens after the important portion of the operation to ensure maximum optimization

3-8-24
 - Added a new UDP Multicast listener
  * HAS SUCCESSFULLY RECEIVED MESSAGES FROM WHITE ETHERNET WOOOOO
   - Multicast has to be set at 224.132.6.1 and port 3456
    - It's also not binding any IP addresses like the old TCP socket listener, which is how UDP works
   - IPC main IP is 10.132.6.14
   - Static IP on receiving MicroPC should be set to 10.132.6.XX (where XX can be anything but 14) (we have it at 17)

  - RECEIVED FIX FROM JED!
   - Turns out 3456 and 3458 are occupied ports used by the main flight logger
    - Changed the port to 3761 and all is working now
  
  - TEST RESULT WITH TWO DSPS AND FLIGHT SIM RUNNING:
   - VST can take in data properly now without falling behind
   - DSP can take in data properly
   - IMU is most likely fine BUT
    - SUUUPER inconsistent with 'incorrect baudrate'
    - Have to ask keith about it next week

  - Fixed XML stream element 
   - changed IP to 10.132.6.17 and port 3761
   - renamed to SPARTA_IPC.xml

3-11-24
  - Removed old batch and python files (LoadCellCalibration and GUI_Bench)